



type Templator
...
end

impl Templater
    template fn (self: Templator, template: string, values: dict<str,any>)
    ...
    end
end

type Server
    templator: Templater
    callbacks: dict<str,fn>
end

impl Server
    new fn (self: Server)

    end

    // todo how do we figure out the args?
    mount fn (self: Server, callback: fn)
    ...
    end

    serve fn (self: Server)
    ...
    end
end

user_template = """
    <p>{name}</p> 
    """

user type
    name: string
end


create_user fn(name: string) 
...
end


get_user_html fn(name: string) -> string


    // the server implicity loads itself into the context
    using context

    // todo how do we deal with errors
    return templator.template(name, user_template) 
end


main fn
    server = Server(port=8080)

    // use of atoms i.e. 'global enums'
    server.mount("/user/<name>", :POST, create_user)
    server.mount("/user/name, :GET, get_user_html)

    server.serve()

end